{"mappings":"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","sources":["src/app.js","src/userLog.json"],"sourcesContent":["// server.js\nrequire(\"dotenv\").config();\nconst express = require(\"express\");\nconst cors = require(\"cors\");\nconst {GoogleGenerativeAI} = require(\"@google/generative-ai\");\nconst {v4: uuidv4} = require(\"uuid\");\nconst app = express();\nconst apiKey = process.env.GEMINI_API_KEY;\nconst genAI = new GoogleGenerativeAI(apiKey);\n//Writing to server storage\nvar fs = require(\"fs\");\ndelete require.cache[require.resolve(\"./userLog.json\")];\nlet sessionHistory = require(\"./userLog.json\");\napp.use(cors()); // Enable CORS for all origins\napp.use(express.json()); // Enable JSON parsing for incoming requests\n\n// Endpoint to serve page\napp.get(\"/\", function (req, res) {\n\tres.sendFile(__dirname + \"../index.html\");\n});\n\nconst isolateNickname = function (nickname) {\n\tconst match = nickname.match(/\\*(.*?)\\*/);\n\treturn match ? match[1] : null;\n};\n\nconst model = genAI.getGenerativeModel({\n\tmodel: \"gemini-1.5-flash-8b\",\n\tsystemInstruction: 'Respond with a creative, spooky, halloween-themed nickname that utilizes their first name and is topical based on the costume they are wearing. Make sure you respond in a fun, lighthearted way The responses should emphasize creativity and fun while being respectful and appropriate for all audiences. Avoid any references to violence, gore, death, or inappropriate language. The nicknames should remain lighthearted friendly. Avoid repetetiveness, and be poetic. Introduce the nickname with a brief phrase welcoming them to Zombie brook, for instance: /\"Welcome to Zombiebrook, [nickname]!/\". Here is some data for inspiration: https://namesbudy.com/alias-names/halloween-nicknames/ and https://creativenomenclature.com/nicknames/spooky-nicknames/ Make the nickname revealed at the last part of the response, not in the middle. I don\\'t want any language after the nickname. When you return the result, you must wrap the nickname itself in an asterix so I can isolate it. If the user inputs a response that is rude, uses offense language, is inappropriate or sexually explicity, do not generate a nickname and provide a one sentence explanation as to why why you chose not to accept their input. ',\n});\n\nconst generationConfig = {\n\ttemperature: 1.2,\n\ttopP: 0.9,\n\ttopK: 41,\n\tmaxOutputTokens: 200,\n\tresponseMimeType: \"text/plain\",\n};\n\nconst writeToLog = sessionHistory => {\n\tfs.writeFile(\"userLog.json\", JSON.stringify(sessionHistory, null, 2), \"utf8\", err => {\n\t\tif (err) {\n\t\t\tconsole.error(\"Error writing to userLog.json:\", err);\n\t\t\treturn err; // Handle error appropriately (e.g., logging it or notifying the user)\n\t\t}\n\t});\n};\n\napp.delete(\"/log\", async function (req, res) {\n\t// const entry = req.body.entryID;\n\t// let matchedEntry = sessionHistory.find(obj => obj.msgID == entry || {});\n\t// console.log(matchedEntry);\n\tsessionHistory = [];\n\ttry {\n\t\tawait writeToLog(sessionHistory);\n\t\tres.status(200).json({message: `Chat history deleted`});\n\t} catch (err) {\n\t\tconsole.log(err);\n\t\tres.status(500).json({err});\n\t}\n});\n\n// GET endpoint to get log history\napp.get(\"/log\", async (req, res) => {\n\ttry {\n\t\tres.status(200).json({sessionHistory});\n\t} catch (err) {\n\t\tres.status(500).json({error: \"Could not fetch log\"});\n\t}\n});\n// POST endpoint to generate nickname\napp.post(\"/generate-nickname\", async (req, res) => {\n\t// Destructure `name` and `costume` from the request body (assuming client sends in contents)\n\tconst {name, costume} = req.body;\n\tconst promptString = `My name is ${name} and I am dressed as ${costume}.`;\n\ttry {\n\t\t// Create a unique session ID\n\t\tlet currentSessionId = uuidv4();\n\t\tconst result = await model.generateContent(promptString, {\n\t\t\tgenerationConfig,\n\t\t\thistory: sessionHistory[currentSessionId],\n\t\t});\n\t\tconst nickname = await result.response.text();\n\t\tconst cleanResult = await isolateNickname(nickname);\n\t\tconst time = new Date();\n\t\t// Append this interaction to the session history (if needed later for more context)\n\t\tsessionHistory.push({\n\t\t\ttime: `${time}`,\n\t\t\tmsgID: `${currentSessionId}`,\n\t\t\trole: \"user\",\n\t\t\tname: `${name}`,\n\t\t\tcostume: `${costume}`,\n\t\t\trole: \"model\",\n\t\t\tresult: `${cleanResult}`,\n\t\t});\n\n\t\tres.status(200).json({nickname});\n\t\twriteToLog(sessionHistory);\n\t} catch (err) {\n\t\tconsole.log(err);\n\t\tres.status(500).json({err});\n\t}\n});\n\nmodule.exports = app;\n","[\n  {\n    \"time\": \"Mon Oct 14 2024 12:35:41 GMT-0400 (Eastern Daylight Time)\",\n    \"msgID\": \"363a79bb-6ba9-49fb-b7fd-5766f03e9557\",\n    \"role\": \"model\",\n    \"name\": \"Violet\",\n    \"costume\": \"tinkerbelle\",\n    \"result\": \"Violet's Whisper\"\n  },\n  {\n    \"time\": \"Mon Oct 14 2024 12:38:07 GMT-0400 (Eastern Daylight Time)\",\n    \"msgID\": \"c9d602bd-5d49-4802-8dbd-78f739fbda1d\",\n    \"role\": \"model\",\n    \"name\": \"Justin\",\n    \"costume\": \"Bored dad\",\n    \"result\": \"Papa-Zoom!\"\n  }\n]"],"names":[],"version":3,"file":"app.js.map","sourceRoot":"../"}